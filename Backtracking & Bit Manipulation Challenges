Backtracking

Combination Sum

public class Solution {
	public ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> a, int b) {
	    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	    
	    // base cases
	    if(a.size() == 0) { return result; }
	    if(b < 0) { return result; }
	    
	    int[] arr = new int[a.size()];
	    for(int i = 0; i < a.size(); i++) { arr[i] = a.get(i); }
	    Arrays.sort(arr);
	    a.clear();
	    for(int val : arr) { if(!a.contains(val)) { a.add(val); } }

	    findCombinationSum(a, b, 0, new ArrayList<Integer>(), result);
	    return result;
	}
	
	public void findCombinationSum(ArrayList<Integer> a, int b, int start, 
	    ArrayList<Integer> curr, ArrayList<ArrayList<Integer>> result) {
	        if(b == 0) {
	            ArrayList<Integer> temp = new ArrayList<Integer>(curr);
	            result.add(temp);
	            return;
	        }
	        for(int i = start; i < a.size(); i++) {
	            // stopping condition
	            if(b < a.get(i)) { return; }
	            
	            curr.add(a.get(i));
	            findCombinationSum(a, b - a.get(i), i, curr, result);
	            curr.remove(curr.size() - 1);
	        }
	    }
}

NQueens

public class Solution {
    static final int QUEEN = 100;
    static final int OPEN = 0;
    
	public ArrayList<ArrayList<String>> solveNQueens(int a) {
	    ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
	    
	    // base case
	    if(a < 1) { return result; }
	    
	    int[][] board = new int[a][a];
	    
	    findNQueens(board, 0, result);
	    return result;
	    
	}
	
	public void findNQueens(int[][] board, int row, ArrayList<ArrayList<String>> result){
	    if(row >= board.length) {
	        ArrayList<String> valid = convertBoard(board);
	        result.add(valid);
	        return;
	    }
	    
	    for(int col = 0; col < board[row].length; col++) {
	        if(isOpenSpace(board, row, col) && board[row][col] == OPEN) {
	            board[row][col] = QUEEN;
	            findNQueens(board, row + 1, result);
	            board[row][col] = OPEN;
	        }
	    }
	}
	
	public boolean isOpenSpace(int[][] board, int row, int col) {
	    
	    int i, j;
	    
	    // check row
	    for(i = 0; i < board.length; i++) {
	        if(board[i][col] == QUEEN) {
	            return false;
	        }
	    }   
	    // check column
	    for(i = 0; i < board[0].length; i++) {
	        if(board[row][i] == QUEEN) {
	            return false;
	        }
	    }
	    // check left diagonal
	    for(i = row, j = col; i >= 0 && j >= 0; i--, j--) {
	        if(board[i][j] == QUEEN) {
	            return false;
	        }
	    }
	    for(i = row, j = col; i < board.length && j < board[0].length; i++, j++) {
	        if(board[i][j] == QUEEN) {
	            return false;
	        }
	    }
	    // check right diagonal
	    for(i = row, j = col; j >= 0 && i < board.length; i++, j--) {
	        if(board[i][j] == QUEEN) {
	            return false;
	        }
	    }
	    for(i = row, j = col; i >= 0 && j < board[0].length; i--, j++) {
	        if(board[i][j] == QUEEN) {
	            return false;
	        }
	    }
	    
	    return true;
	}
	
	public ArrayList<String> convertBoard(int[][] board) {
	    ArrayList<String> a = new ArrayList<String>();
	    StringBuffer buffer = new StringBuffer();
	    for(int row = 0; row < board.length; row++) {
	        for(int col = 0; col < board[0].length; col++) {
	            if(board[row][col] == QUEEN) {
	                buffer.append("Q");
	            }
	            else{
	                buffer.append(".");
	            }
	        }
	        a.add(buffer.toString());
	        buffer.setLength(0);
	    }
	    return a;
	}
}

Bit Manipulation

Number of 1 Bits

public class Solution {
	public int numSetBits(long a) {
	    int count = 0;
	    for(int i = 0; i < 32; i++) {
	        if((a & (1 << i)) != 0) {
	            count++;
	        }
	    }
	    return count;
	}
}

Single Number

public class Solution {
	// DO NOT MODIFY THE LIST
	public int singleNumber(final List<Integer> a) {
	    int result = 0;
	    for(int i = 0; i < a.size(); i++) {
	        result ^= a.get(i);
	    }
	    return result;
	}
}

