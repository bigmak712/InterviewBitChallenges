<img src='http://i.imgur.com/spLOTUk.gif' title='Video Walkthrough' width='' alt='Video Walkthrough' /> 

Hashing

Diffk II

public class Solution {
	public int diffPossible(final List<Integer> a, int b) {
	    if(a.size() < 2){
	        return 0;
	    }
	    
	    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
	    for(int i = 0; i < a.size(); i++) {
	        int val = a.get(i);

	        if(map.containsKey(val + b) || map.containsKey(val - b)) {
	            return 1;
	        }
	        
	        map.put(val, 1);

	    }
	    return 0;
	}
}

Anagrams
public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	    
	    ArrayList<int[]> list = new ArrayList<int[]>();
	    for(int i = 0; i < a.size(); i++) {
	        int[] arr = new int[26];
	        list.add(arr);
	        String temp = a.get(i);
	        for(int j = 0; j < temp.length(); j++) {
	            int pos = temp.charAt(j) - 'a';
	            list.get(i)[pos]++;
	        }
	    }
	    
	    int[] check = new int[list.size()];
	    for(int i = 0; i < check.length; i++) {
	        if(check[i] == 0) {
	            check[i] = 1;
	            ArrayList<Integer> tempList = new ArrayList<Integer>();
	            tempList.add(i + 1);
	            for(int j = i + 1; j < check.length; j++) {
	                if(Arrays.equals(list.get(i), list.get(j))) {
	                    tempList.add(j + 1);
	                    check[j] = 1;
	                }
	            }
	            result.add(tempList);
	        }
	    }
	    return result;
	}
}

Substring Concatenation

public class Solution {
    
    HashMap<String, Integer> words = new HashMap<String, Integer>();
    
	public ArrayList<Integer> findSubstring(String a, final List<String> b) {
	    
	    HashMap<String, Integer> freq = new HashMap<String, Integer>();
	    ArrayList<Integer> indices = new ArrayList<Integer>();

	    if(b.size() == 0) { return indices; }

	    int count = b.size();
	    int length = b.get(0).length();
	    int concat_length = count*length;
	    int num_words = 0;
	    
	    for(String s : b) {
	        if(freq.containsKey(s)) {
	            freq.put(s, freq.get(s) + 1);
	        }
	        else {
	            freq.put(s, 1);
	        }
	    }
	    
	    for(int i = 0; i <= a.length() - concat_length; i++) {
	        int start = i;
	        int end = i + length;
            HashMap<String, Integer> tempMap = new HashMap<String, Integer>();

	        for(; start <= a.length() - length; start = start + length) {
	            String sub = a.substring(start, end);
                if(tempMap.containsKey(sub)) {
                    tempMap.put(sub, tempMap.get(sub) + 1);
                }
                else {
                    tempMap.put(sub, 1);
                }
                end += length;
                
                if(freq.entrySet().equals(tempMap.entrySet())) {
	                indices.add(i);
	                break;
	            }   
	        }
	    }
	    return indices;
	}
}

Linked Lists

Remove Duplicates from Sorted List

public class Solution {
	public ListNode deleteDuplicates(ListNode a) {
	    if(a == null || a.next == null) {
	        return a;
	    }
	    
	    ListNode head = new ListNode(a.val);
	    ListNode prev = head;
	    ListNode curr = a.next;

	    while(curr != null) {
	        if(prev.val != curr.val) {
	            ListNode newNode = new ListNode(curr.val);
	            prev.next = newNode;
	            prev = newNode;
	        }
	        curr = curr.next;
	    }
	    
	    return head;
	}
}

K reverse linked list

public class Solution {
    public ListNode reverseList(ListNode A, int B) {
        
        if(A == null || A.next == null) {return A;}
        
        return reverseK(A, B);
    }
    public ListNode reverseK(ListNode A, int B) {
        ListNode currNode = A;
        ListNode nextNode = null;
        ListNode prevNode = null;
        
        int num = B - 1;
        
        while(num >= 0 && currNode != null) {
            nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
            num--;
        }
        
        if(nextNode != null) {
            A.next = reverseK(nextNode, B);
        }
        
        return prevNode;
    }
}

Add Two Numbers as Lists

public class Solution {
	public ListNode addTwoNumbers(ListNode a, ListNode b) {
	    if(a == null) {return b;}
	    if(b == null) {return a;}
	    
	    int carry = 0;
	    ListNode head = null;
	    ListNode curr = null;

	    while(a != null || b != null || carry == 1) {
	        
	        int sum = carry;
	        
	        if(a != null) {
	            sum += a.val;
	            a = a.next;
	        }
	        
	        if(b != null) {
	            sum += b.val;
	            b = b.next;
	        }
	        
	        carry = 0;
	        
	        if(sum >= 10) {
	            carry = 1;
	            sum = sum - 10;
	        }
	        
	        ListNode newNode = new ListNode(sum);
	        
	        if(head == null) {
	            head = newNode;
	            curr = head;
	        }
	        else {
	            curr.next = newNode;
	            curr = curr.next;
	        }
	    }
	    
	    return head;
	}
}

Remove Nth Node from List End

public class Solution {
	public ListNode removeNthFromEnd(ListNode a, int b) {
	    if(a == null || a.next == null) {return null;}
	    
	    a = reverse(a);
	    
	    ListNode prev = null;
	    ListNode curr = a;
	    int count = 1;
	    while(count < b) {
	        if(curr == null) {
	            a = reverse(a);
	            a = a.next;
	            return a;
	        }
	        prev = curr;
	        curr = curr.next;
	        count++;
	    }
	    if(prev != null && curr != null) {
	        prev.next = curr.next;
	        curr.next = null;
	    }
	    else if(prev == null) {
	        a = a.next;
	    }
	   
	    a = reverse(a);
	    
	    if(curr == null) {
	        a = a.next;
	    }
	    
	    return a;
	}
	public static ListNode reverse(ListNode node) {
	    ListNode prev = null;
	    ListNode curr = node;
	    ListNode next = null;
	    
	    while(curr != null) {
	        next = curr.next;
	        curr.next = prev;
	        prev = curr;
	        curr = next;
	    }
	    node = prev;
	    return node;
	}
}

